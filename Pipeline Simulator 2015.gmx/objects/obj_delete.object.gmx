<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_delete</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draggin=false;
dx=0;
dy=0;
init=false; alarm[0]=5; //To prevent insta-drag
clickbuffer=0;
dlg=noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>init=true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (draggin &amp;&amp; !mouse_check_button(mb_left)) {
    draggin=false;
    if (mouse_x &lt; obj_workspace.vb_x &amp;&amp; mouse_y &gt; obj_workspace.hb_y) {
        var nid,diffx,aux;
        nid = floor((mouse_y-obj_workspace.hb_y)/obj_workspace.ssep);
        diffx = (nid-n)*obj_workspace.ssep;
        if (nid&lt;obj_workspace.instrNum) {
            aux = obj_workspace.instrs[nid];
            obj_workspace.instrs[nid] = obj_workspace.instrs[n];
            obj_workspace.instrs[n] = aux;
            
            with (obj_stage) {
                if (n == other.n) { //Being dragged to
                    x += diffx;
                    y = obj_workspace.hb_y+(nid+0.5)*obj_workspace.ssep;
                    n = nid;
                } else if (n == nid) { //New pos
                    x -= diffx;
                    y = obj_workspace.hb_y+(other.n+0.5)*obj_workspace.ssep;
                    n = other.n;
                }
                
                if (x&lt;obj_workspace.vb_x) {
                    x+=(room_width-obj_workspace.vb_x); //lol wraparound
                }
            }
        }
    }
}

if (clickbuffer) --clickbuffer;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var i;
for(i=n;i&lt;obj_workspace.instrNum-1;++i) {
    obj_workspace.instrs[i]=obj_workspace.instrs[i+1];
    obj_workspace.delObjs[i]=obj_workspace.delObjs[i+1];
}
with (obj_stage) {
    if (n==other.n) instance_destroy();
    if (n&gt;other.n) {
        --n; y-=obj_workspace.ssep; x-=obj_workspace.ssep; 
        if (x&lt;obj_workspace.vb_x) {
            x+=(room_width-obj_workspace.vb_x); //lol
        }
    }
}
with (obj_delete) {
    if (n&gt;other.n) {y-=obj_workspace.ssep; --n;}
}
obj_workspace.instrNum--;
with (obj_add) event_perform(ev_other,ev_user0);
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (init) {
    if (clickbuffer) { //Double click
        dlg = get_string_async("Digite o novo nome para a instrução:", obj_workspace.instrs[n]);
    } else {
        draggin=true;
        dx=x-mouse_x+(sprite_width-sprite_xoffset);
        dy=y-mouse_y;
        clickbuffer=12;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="63">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var i_d = ds_map_find_value(async_load, "id");
if (i_d == dlg &amp;&amp; ds_map_find_value(async_load, "status")) {
    str = ds_map_find_value(async_load, "result");
    if (str != "") {
        obj_workspace.instrs[n] = str;
    }
    if (string_upper(str) == "NOP") {
        with (obj_stage) {
            if (n == other.n) image_alpha=0.4;
        }
    } else {
        with (obj_stage) {
            if (n == other.n) image_alpha=1;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
